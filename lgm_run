#!/usr/bin/env python3

import sys
import os
import click
import subprocess as sp
import time
import signal
import atexit
import functools

script_dir = os.path.dirname(os.path.realpath(__file__))
manager_def = os.path.join(script_dir, "manager_tcp")
manager_proc = None
login = None
ava_ip = 'localhost'
ava_port = 4000


def clean_up():
    if manager_proc:
        manager_proc.send_signal(signal.SIGINT)
        os.system('ssh {} killall -9 worker manager_tcp &>/dev/null'.format(login))
atexit.register(clean_up)

def run_test(test_cmd):
    try:
        print("Running test")
        sys.stdout.flush()
        return sp.run(test_cmd, env=ava_env_client()).returncode
    except Exception as e:
        print("ERROR:", e)
        sys.exit(1)

guest_lib=os.path.join(script_dir, 'libguestlib.so')
shim=os.path.join(script_dir, 'guestshim.so')

extra_client_env = {
    'AVA_LOCAL'   : '1',
    'AVA_ENABLE_SSL': '0',
    'HCC_LAZYINIT': '1',
    'HIP_ENABLE_COMMAND_SCHEDULER' : '0',
    'HIP_ENABLE_SEP_MEMCPY_COMMAND_SCHEDULER' : '0',
    'LGM_MEMCPY_FIX_SIZE' : '0',
    'LGM_MEMCPY_ENABLE_ENCRYPTION' : '0',
    'HIP_COMMAND_SCHEDULER_FR_INTERVAL_US' : '-1',
    'HIP_COMMAND_SCHEDULER_MEMCPY_FR_INTERVAL_US' : '-1',
}

def ava_env_client():
    new_env = dict(os.environ)
    new_env['AVA_IP'] = ava_ip
    new_env['AVA_PORT'] = str(ava_port)
    new_env.update(extra_client_env)
    return new_env

click_option = functools.partial(click.option, show_default=True)
@click.command()
@click_option('--exec-xfer-stream', '-3', is_flag=True, help="Bar 3 in our graphs")
@click_option('--data-encryption', '-4', is_flag=True, help="Bar 4 in our graphs")
@click_option('--data-obv-scheduling', '-5', is_flag=True, help="Bar 5 in our graphs, Requires tuning --kernel-fr-interval-us, --memcpy-fr-interval-us, and --gpu-op-batch-size")
@click.argument('run-type', type=click.Choice(['baseline','ava']))
@click.argument('test-cmd', nargs=-1)
@click_option('--server', default="localhost")
@click_option('--server-port', type=int, default=4000)
@click_option('--enable-ssl', is_flag=True)
@click_option('--gpu-op-batch-size', default=64)
@click_option('--gpu-op-batching/--no-gpu-op-batching', default=False)
@click_option('--gpu-op-sep-memcpy', is_flag=True)
@click_option('--hip-memcpy-fixed-size', is_flag=True)
@click_option('--hip-memcpy-encrypted', is_flag=True)
@click_option('--hip-check-complete', is_flag=True)
@click_option('--kernel-fr-interval-us', type=int, help="if not set, kernel launches are not fixed rated")
@click_option('--memcpy-fr-interval-us', type=int, help="if not set, memcpys are not fixed rated")
@click_option('--hip-memcpy-n-staging-buffers', type=int, help="specify number of staging buffers (default 256)")
def main(run_type, test_cmd, server, server_port, enable_ssl, gpu_op_batching, gpu_op_batch_size,
         hip_memcpy_fixed_size, hip_memcpy_encrypted, gpu_op_sep_memcpy,
         hip_check_complete, kernel_fr_interval_us, memcpy_fr_interval_us,
         hip_memcpy_n_staging_buffers, exec_xfer_stream, data_encryption,
         data_obv_scheduling):
    global ava_ip
    global ava_port

    if data_obv_scheduling:
        data_encryption = True
        if not kernel_fr_interval_us:
            print("You must set --kernel-fr-interval-us")
            return
        if not memcpy_fr_interval_us:
            print("You must set --memcpy-fr-interval-us")
            return
    if data_encryption:
        exec_xfer_stream = True
        hip_memcpy_encrypted = True
    if exec_xfer_stream:
        gpu_op_sep_memcpy = True
        hip_memcpy_fixed_size = True
    if len(test_cmd) == 0:
        print("no command given exiting!")
        sys.exit(1)
    if server:
        ava_ip = server
    ava_port = server_port
    if enable_ssl:
        print("SSL on")
        extra_client_env["AVA_ENABLE_SSL"] = "1"
    if gpu_op_batching:
        print("BATCHING on")
        extra_client_env["HIP_ENABLE_COMMAND_SCHEDULER"] = "1"
        extra_client_env["HIP_COMMAND_SCHEDULER_BATCH_SIZE"] = str(gpu_op_batch_size)
    if gpu_op_sep_memcpy:
        print("SPLIT stream on")
        extra_client_env["HIP_ENABLE_SEP_MEMCPY_COMMAND_SCHEDULER"] = "1"
        extra_client_env["HIP_COMMAND_SCHEDULER_BATCH_SIZE"] = str(gpu_op_batch_size)
    if hip_memcpy_fixed_size:
      print("FIX size on")
      extra_client_env["LGM_MEMCPY_FIX_SIZE"] = "1"
    if hip_memcpy_encrypted:
      print("Encryption on")
      extra_client_env["LGM_MEMCPY_ENABLE_ENCRYPTION"] = "1"
    if hip_check_complete:
        extra_client_env["HIP_SYNC_CHECK_BATCH_COMPLETE"] = "1"
    if run_type == "ava":
        extra_client_env['LD_PRELOAD'] = ':'.join([shim, guest_lib])
    if kernel_fr_interval_us:
        extra_client_env['HIP_COMMAND_SCHEDULER_FR_INTERVAL_US'] = \
                str(kernel_fr_interval_us)
    if memcpy_fr_interval_us:
        extra_client_env['HIP_COMMAND_SCHEDULER_MEMCPY_FR_INTERVAL_US'] = \
                str(memcpy_fr_interval_us)
    if hip_memcpy_n_staging_buffers:
      extra_client_env["HIP_MEMCPY_N_STAGING_BUFFERS"] = str(hip_memcpy_n_staging_buffers)

    for k,v in sorted(extra_client_env.items()):
        print(k, "=", v)
    print("TEST CMD:", " ".join(test_cmd))
    sys.exit(run_test(test_cmd))

if __name__ == '__main__':
    main()
